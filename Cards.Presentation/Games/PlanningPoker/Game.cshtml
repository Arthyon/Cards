@using Cards.Presentation.Games.PlanningPoker.Objects
@inherits System.Web.Mvc.WebViewPage<Cards.Presentation.Games.PlanningPoker.PlanningPokerGame>
         <script src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js"></script>
<div id="playingArea">
    <div data-bind="visible: !gameStarted()">
        Not Started yet
        <ul data-bind="foreach: allPlayers">
            <li><span data-bind="text: Name"></span> - <span data-bind="text: Role"></span></li>
        </ul>
        Role:<br />
        <input type="radio" name="Role" value="Player" id="rolePlayer" data-bind="checked: inRole" /><label for="rolePlayer">Player</label>
        <input type="radio" name="Role" value="Board" id="roleBoard" data-bind="checked: inRole" /><label for="roleBoard">Board</label>
        <button data-bind="click: updateInformation">Update settings</button><br />
        <button data-bind="click: startGame">Start</button>
    </div>
    <div data-bind="visible:gameStarted">
        <span data-bind="visible: isPlayer">
            <input type="checkbox" id="chkShowBoard" data-bind="checked: boardIsVisible" /><label for="chkShowBoard">Show board</label>
        </span>
            <div id="board" data-bind="visible:boardIsVisible">
                <ul data-bind="foreach: players">
                    <li><span data-bind="text:Name"></span> - <span data-bind="text:Status"></span></li>
                </ul>
                <button data-bind="visible: roundFinished, click: newRound">New round</button>
            </div>
            <div data-bind="visible: isPlayer">
                <p data-bind="visible: !cardChosen()">Click a card to play it</p>
                <p data-bind="visible: cardChosen">You chose <span data-bind="text: chosenCard"></span></p>

                <div id="hand">
                    <ul id="cards" data-bind="foreach: cards">
                        <li><span data-bind="text: Value, click:$parent.playCard"></span></li>
                    </ul>
                </div>
            </div>
</div>
    

</div>
<script>

    var gametypeHub = $.connection["@Model.GameType"];
    

    var Model = function() {
        var self = this;
        
        // --- GameState --- 
        self.gameStarted = ko.observable(false);
        self.roundFinished = ko.observable(false);
        
        self.players = ko.observableArray();
        self.allPlayers = ko.observableArray();
        
        self.startGame = function () {
            gametypeHub.server.startGame();
        };

        self.newRound = function() {

            gametypeHub.server.startNewRound();
        };
        
        gametypeHub.client.syncState = function (gameState) {
            syncState(gameState);
        };
        
        function syncState(gameState) {

            self.cards(gameState.Cards);

            updateBoardState(gameState.BoardState);

            if (gameState.InProgress && !self.gameStarted()) {
                //Set board visible if:
                //Current player is board
                //or
                //No board present
                if (!self.isPlayer() || !gameState.BoardState.GameContainsBoard) {
                    self.boardIsVisible(true);
                }

                self.gameStarted(true);
            }
        }
        

        // ---  Player ---
        self.inRole = ko.observable("@PlanningPokerRole.Player.ToString()");
        self.cards = ko.observableArray();
        self.cardChosen = ko.observable(false);
        self.chosenCard = ko.observable();
        
        self.isPlayer = ko.computed(function () {
            return self.inRole() != "@PlanningPokerRole.Board.ToString()";
        });
        
        self.updateInformation = function () {
            gametypeHub.server.updateInformation(self.inRole());
        };
        
        
        self.playCard = function (card) {
            if (!self.cardChosen()) {
                gametypeHub.server.playCard(card.Value).done(function () {

                    self.chosenCard(card.Value);
                    self.cardChosen(true);

                }).fail(function () {
                    alert("Fail");
                });
            }

        };
        
        gametypeHub.client.updateClientState = function (currentPlayer) {
            self.inRole(currentPlayer.Role);
            self.chosenCard(currentPlayer.ChosenCard);
            self.cardChosen(currentPlayer.ChosenCard != null);
        };
        
        // --- Board --- 
        self.boardIsVisible = ko.observable(false);

        gametypeHub.client.boardStateUpdated = function (boardState) {
            updateBoardState(boardState);
        };
        
        function updateBoardState(boardState) {
            self.allPlayers(boardState.AllPlayers);
            self.roundFinished(boardState.RoundFinished);

            self.players(boardState.Players);
        }

  
        $.connection.hub.start();
        
    };

    ko.applyBindings(new Model(), $("#playingArea")[0]);
    
   

</script>

