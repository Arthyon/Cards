@inherits System.Web.Mvc.WebViewPage<Cards.Presentation.Games.PlanningPoker.PlanningPokerGame>
         <script src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js"></script>
<div id="playingArea">
    <div data-bind="visible: !gameStarted()">
        Not Started yet
        <ul data-bind="foreach: players">
            <li><span data-bind="text: Name"></span> - <span data-bind="text: Role"></span></li>
        </ul>
        Role:<br />
        <input type="radio" name="Role" value="Player" id="rolePlayer" data-bind="checked: inRole" /><label for="rolePlayer">Player</label>
        <input type="radio" name="Role" value="Board" id="roleBoard" data-bind="checked: inRole" /><label for="roleBoard">Board</label>
        <button data-bind="click: updateInformation">Update settings</button><br />
        <button data-bind="click: startGame">Start</button>
    </div>
    <div data-bind="visible:gameStarted">
        <input type="checkbox" id="chkShowBoard" data-bind="checked: boardIsVisible" /><label for="chkShowBoard">Show board</label>
        <div id="board" data-bind="visible:boardIsVisible">
            <ul data-bind="foreach: players">
                <li><span data-bind="text:Name"></span> - <span data-bind="text:Status"></span></li>
            </ul>
        </div>

        <p data-bind="visible: !cardChosen()">Click a card to play it</p>
        <p data-bind="visible: cardChosen">You chose <span data-bind="text: chosenCard"></span></p>

        <div id="hand">
            <ul id="cards" data-bind="foreach: cards">
                <li><span data-bind ="text: Value, click:$parent.playCard"></span></li>
            </ul>
        </div>
    </div>
    

</div>
<script>

    var gametypeHub = $.connection["@Model.GameType"];
    

    var Model = function() {
        var self = this;
        

        // ---------- Signal R -----------
        function updateBoardState(boardState) {
            self.players(boardState.Players);
        }
        function syncState(gameState) {
            
            self.cards(gameState.Cards);

            updateBoardState(gameState.BoardState);
            
            if (gameState.InProgress && !self.gameStarted()) {
                self.gameStarted(true);
            }
        }


        gametypeHub.client.boardStateUpdated = function (boardState) {
            updateBoardState(boardState);
        };

        gametypeHub.client.syncState = function (gameState) {
            syncState(gameState);
        };
        
        // ------------- KO --------------
        self.startGame = function() {
            gametypeHub.server.startGame();
        };

        self.updateInformation = function() {
            gametypeHub.server.updateInformation(self.inRole);
        };

        self.inRole = "Player";
        self.gameStarted = ko.observable(false);
        self.boardIsVisible = ko.observable(true);

        self.cards = ko.observableArray();
        self.players = ko.observableArray();

        self.cardChosen = ko.observable(false);
        self.chosenCard = ko.observable();
        
        self.playCard = function (card) {
            if (!self.cardChosen()) {
                gametypeHub.server.playCard(card.Value).done(function () {
                    
                    self.chosenCard(card.Value);
                    self.cardChosen(true);
                    
                }).fail(function () {
                    alert("Fail");
                });
            }
            
        };


        $.connection.hub.start();
        
    };

    ko.applyBindings(new Model(), $("#playingArea")[0]);
    
   

</script>

